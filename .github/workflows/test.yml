name: Go Test

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    paths:
      - "**.go"
      - ".github/workflows/lint.yml"
      - ".github/workflows/test.yml"
  pull_request:
    paths:
      - "**.go"
      - ".github/workflows/lint.yml"
      - ".github/workflows/test.yml"

env:
  COVERAGE_FILE: coverage.out

jobs:
  lint:
    name: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        go-version: ["1.23", "1.24"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.23", "1.24"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: go install ./...
        working-directory: ${{ github.workspace }}

      - name: Build SDK project
        run: go build ./...
        working-directory: ${{ github.workspace }}

      - name: Run unit tests on Unix systems
        if: runner.os != 'Windows'
        run: |
          go test -count=1 -tags=preview.query -coverpkg=./... -covermode=atomic -coverprofile $COVERAGE_FILE  ./...
          grep -v -E -f .covignore $COVERAGE_FILE > coverage.filtered.out && mv coverage.filtered.out $COVERAGE_FILE
        working-directory: ${{ github.workspace }}

      - name: Run unit tests on Windows systems
        if: runner.os == 'Windows'
        run: |
          go test -count=1 -tags="preview.query" -coverpkg=./... -covermode=atomic -coverprofile $env:COVERAGE_FILE  ./...
          findstr /V /G:.covignore $env:COVERAGE_FILE > coverage.filtered.out
          Move-Item -Path coverage.filtered.out -Destination $env:COVERAGE_FILE -Force
        working-directory: ${{ github.workspace }}

      - name: Generate Coverage File
        if: runner.os != 'Windows'
        run: go tool cover -html="${COVERAGE_FILE}" -o "cover.html"
        working-directory: ${{ github.workspace }}

      - name: Generate Coverage File
        if: runner.os == 'Windows'
        run: go tool cover -html="$($env:COVERAGE_FILE)" -o "cover.html"
        working-directory: ${{ github.workspace }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
